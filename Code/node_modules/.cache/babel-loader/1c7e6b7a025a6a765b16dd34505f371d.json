{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _wrapAsyncGenerator = require(\"C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  function ping(_x) {\n    return _ping.apply(this, arguments);\n  }\n\n  function _ping() {\n    _ping = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('ping', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(peerId)\n                }, options)),\n                headers: options.headers,\n                transform: toCamel\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _ping.apply(this, arguments);\n  }\n\n  return ping;\n});","map":{"version":3,"sources":["C:/Users/pavik/Desktop/Group6_nft-marketplace/Code/node_modules/ipfs-http-client/src/ping.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","ping","peerId","options","post","timeout","signal","searchParams","arg","headers","transform","res","ndjson"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAChC;AACF;AACA;AAHkC,WAIfC,IAJe;AAAA;AAAA;;AAAA;AAAA,uEAIhC,iBAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,cAAAA,OAA/B,2DAAyC,EAAzC;AAAA;AAAA,0CACoBH,GAAG,CAACI,IAAJ,CAAS,MAAT,EAAiB;AACjCC,gBAAAA,OAAO,EAAEF,OAAO,CAACE,OADgB;AAEjCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFiB;AAGjCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,YAAKN,MAAL;AAD0B,mBAE1BC,OAF0B,EAHE;AAOjCM,gBAAAA,OAAO,EAAEN,OAAO,CAACM,OAPgB;AAQjCC,gBAAAA,SAAS,EAAEhB;AARsB,eAAjB,CADpB;;AAAA;AACQiB,cAAAA,GADR;AAYE,mFAAQA,GAAG,CAACC,MAAJ,EAAR;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJgC;AAAA;AAAA;;AAkBhC,SAAOX,IAAP;AACD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n"]},"metadata":{},"sourceType":"script"}