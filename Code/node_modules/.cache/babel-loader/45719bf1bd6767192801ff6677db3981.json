{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useContext}from'react';import Web3Context from'../../../store/web3-context';import CollectionContext from'../../../store/collection-context';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ipfsClient=require('ipfs-http-client');var ipfs=ipfsClient.create({host:'ipfs.infura.io',port:5001,protocol:'https'});var MintForm=function MintForm(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),enteredName=_useState2[0],setEnteredName=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),descriptionIsValid=_useState4[0],setDescriptionIsValid=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),enteredDescription=_useState6[0],setEnteredDescription=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),nameIsValid=_useState8[0],setNameIsValid=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),capturedFileBuffer=_useState10[0],setCapturedFileBuffer=_useState10[1];var _useState11=useState(true),_useState12=_slicedToArray(_useState11,2),fileIsValid=_useState12[0],setFileIsValid=_useState12[1];var web3Ctx=useContext(Web3Context);var collectionCtx=useContext(CollectionContext);var enteredNameHandler=function enteredNameHandler(event){setEnteredName(event.target.value);};var enteredDescriptionHandler=function enteredDescriptionHandler(event){setEnteredDescription(event.target.value);};var captureFile=function captureFile(event){event.preventDefault();var file=event.target.files[0];var reader=new window.FileReader();reader.readAsArrayBuffer(file);reader.onloadend=function(){setCapturedFileBuffer(Buffer(reader.result));};};var submissionHandler=function submissionHandler(event){event.preventDefault();enteredName?setNameIsValid(true):setNameIsValid(false);enteredDescription?setDescriptionIsValid(true):setDescriptionIsValid(false);capturedFileBuffer?setFileIsValid(true):setFileIsValid(false);var formIsValid=enteredName&&enteredDescription&&capturedFileBuffer;// Upload file to IPFS and push to the blockchain\nvar mintNFT=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var fileAdded,metadata,metadataAdded;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return ipfs.add(capturedFileBuffer);case 2:fileAdded=_context.sent;if(fileAdded){_context.next=6;break;}console.error('Something went wrong when updloading the file');return _context.abrupt(\"return\");case 6:metadata={title:\"Asset Metadata\",type:\"object\",properties:{name:{type:\"string\",description:enteredName},description:{type:\"string\",description:enteredDescription},image:{type:\"string\",description:fileAdded.path}}};_context.next=9;return ipfs.add(JSON.stringify(metadata));case 9:metadataAdded=_context.sent;if(metadataAdded){_context.next=13;break;}console.error('Something went wrong when updloading the file');return _context.abrupt(\"return\");case 13:collectionCtx.contract.methods.safeMint(metadataAdded.path).send({from:web3Ctx.account}).on('transactionHash',function(hash){collectionCtx.setNftIsLoading(true);}).on('error',function(e){window.alert('Something went wrong when pushing to the blockchain');collectionCtx.setNftIsLoading(false);});case 14:case\"end\":return _context.stop();}}},_callee);}));return function mintNFT(){return _ref.apply(this,arguments);};}();formIsValid&&mintNFT();};var nameClass=nameIsValid?\"form-control\":\"form-control is-invalid\";var descriptionClass=descriptionIsValid?\"form-control\":\"form-control is-invalid\";var fileClass=fileIsValid?\"form-control\":\"form-control is-invalid\";return/*#__PURE__*/_jsxs(\"form\",{onSubmit:submissionHandler,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"row justify-content-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-md-2\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"\".concat(nameClass,\" mb-1\"),placeholder:\"Name...\",value:enteredName,onChange:enteredNameHandler})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"\".concat(descriptionClass,\" mb-1\"),placeholder:\"Description...\",value:enteredDescription,onChange:enteredDescriptionHandler})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-2\",children:/*#__PURE__*/_jsx(\"input\",{type:\"file\",className:\"\".concat(fileClass,\" mb-1\"),onChange:captureFile})})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-lg btn-info text-white btn-block\",children:\"MINT\"})]});};export default MintForm;","map":{"version":3,"sources":["C:/Users/pavik/Desktop/nft-marketplace/src/components/Content/MintNFT/MintForm.js"],"names":["useState","useContext","Web3Context","CollectionContext","ipfsClient","require","ipfs","create","host","port","protocol","MintForm","enteredName","setEnteredName","descriptionIsValid","setDescriptionIsValid","enteredDescription","setEnteredDescription","nameIsValid","setNameIsValid","capturedFileBuffer","setCapturedFileBuffer","fileIsValid","setFileIsValid","web3Ctx","collectionCtx","enteredNameHandler","event","target","value","enteredDescriptionHandler","captureFile","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","submissionHandler","formIsValid","mintNFT","add","fileAdded","console","error","metadata","title","type","properties","name","description","image","path","JSON","stringify","metadataAdded","contract","methods","safeMint","send","from","account","on","hash","setNftIsLoading","e","alert","nameClass","descriptionClass","fileClass"],"mappings":"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","sourcesContent":["import { useState, useContext } from 'react';\r\n\r\nimport Web3Context from '../../../store/web3-context';\r\nimport CollectionContext from '../../../store/collection-context';\r\n\r\nconst ipfsClient = require('ipfs-http-client');\r\nconst ipfs = ipfsClient.create({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\nconst MintForm = () => {  \r\n  const [enteredName, setEnteredName] = useState('');\r\n  const [descriptionIsValid, setDescriptionIsValid] = useState(true);\r\n\r\n  const [enteredDescription, setEnteredDescription] = useState('');\r\n  const [nameIsValid, setNameIsValid] = useState(true);\r\n\r\n  const [capturedFileBuffer, setCapturedFileBuffer] = useState(null);\r\n  const [fileIsValid, setFileIsValid] = useState(true);\r\n\r\n  const web3Ctx = useContext(Web3Context);\r\n  const collectionCtx = useContext(CollectionContext);\r\n\r\n  const enteredNameHandler = (event) => {\r\n    setEnteredName(event.target.value);\r\n  };\r\n\r\n  const enteredDescriptionHandler = (event) => {\r\n    setEnteredDescription(event.target.value);\r\n  };\r\n  \r\n  const captureFile = (event) => {\r\n    event.preventDefault();\r\n\r\n    const file = event.target.files[0];\r\n\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      setCapturedFileBuffer(Buffer(reader.result));     \r\n    }\r\n  };  \r\n  \r\n  const submissionHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    enteredName ? setNameIsValid(true) : setNameIsValid(false);\r\n    enteredDescription ? setDescriptionIsValid(true) : setDescriptionIsValid(false);\r\n    capturedFileBuffer ? setFileIsValid(true) : setFileIsValid(false);\r\n\r\n    const formIsValid = enteredName && enteredDescription && capturedFileBuffer;\r\n\r\n    // Upload file to IPFS and push to the blockchain\r\n    const mintNFT = async() => {\r\n      // Add file to the IPFS\r\n      const fileAdded = await ipfs.add(capturedFileBuffer);\r\n      if(!fileAdded) {\r\n        console.error('Something went wrong when updloading the file');\r\n        return;\r\n      }\r\n\r\n      const metadata = {\r\n        title: \"Asset Metadata\",\r\n        type: \"object\",\r\n        properties: {\r\n          name: {\r\n            type: \"string\",\r\n            description: enteredName\r\n          },\r\n          description: {\r\n            type: \"string\",\r\n            description: enteredDescription\r\n          },\r\n          image: {\r\n            type: \"string\",\r\n            description: fileAdded.path\r\n          }\r\n        }\r\n      };\r\n\r\n      const metadataAdded = await ipfs.add(JSON.stringify(metadata));\r\n      if(!metadataAdded) {\r\n        console.error('Something went wrong when updloading the file');\r\n        return;\r\n      }\r\n      \r\n      collectionCtx.contract.methods.safeMint(metadataAdded.path).send({ from: web3Ctx.account })\r\n      .on('transactionHash', (hash) => {\r\n        collectionCtx.setNftIsLoading(true);\r\n      })\r\n      .on('error', (e) =>{\r\n        window.alert('Something went wrong when pushing to the blockchain');\r\n        collectionCtx.setNftIsLoading(false);  \r\n      })      \r\n    };\r\n\r\n    formIsValid && mintNFT();\r\n  };\r\n\r\n  const nameClass = nameIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  const descriptionClass = descriptionIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  const fileClass = fileIsValid? \"form-control\" : \"form-control is-invalid\";\r\n  \r\n  return(\r\n    <form onSubmit={submissionHandler}>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-2\">\r\n          <input\r\n            type='text'\r\n            className={`${nameClass} mb-1`}\r\n            placeholder='Name...'\r\n            value={enteredName}\r\n            onChange={enteredNameHandler}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <input\r\n            type='text'\r\n            className={`${descriptionClass} mb-1`}\r\n            placeholder='Description...'\r\n            value={enteredDescription}\r\n            onChange={enteredDescriptionHandler}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-2\">\r\n          <input\r\n            type='file'\r\n            className={`${fileClass} mb-1`}\r\n            onChange={captureFile}\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type='submit' className='btn btn-lg btn-info text-white btn-block'>MINT</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MintForm;"]},"metadata":{},"sourceType":"module"}