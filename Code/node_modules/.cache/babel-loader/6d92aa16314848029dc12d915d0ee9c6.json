{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"C:/Users/pavik/Desktop/nft-marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useReducer}from'react';import CollectionContext from'./collection-context';import{jsx as _jsx}from\"react/jsx-runtime\";var defaultCollectionState={contract:null,totalSupply:null,collection:[],nftIsLoading:true};var collectionReducer=function collectionReducer(state,action){if(action.type==='CONTRACT'){return{contract:action.contract,totalSupply:state.totalSupply,collection:state.collection,nftIsLoading:state.nftIsLoading};}if(action.type==='LOADSUPPLY'){return{contract:state.contract,totalSupply:action.totalSupply,collection:state.collection,nftIsLoading:state.nftIsLoading};}if(action.type==='LOADCOLLECTION'){return{contract:state.contract,totalSupply:state.totalSupply,collection:action.collection,nftIsLoading:state.nftIsLoading};}if(action.type==='UPDATECOLLECTION'){var index=state.collection.findIndex(function(NFT){return NFT.id===parseInt(action.NFT.id);});var collection=[];if(index===-1){collection=[action.NFT].concat(_toConsumableArray(state.collection));}else{collection=_toConsumableArray(state.collection);}return{contract:state.contract,totalSupply:state.totalSupply,collection:collection,nftIsLoading:state.nftIsLoading};}if(action.type==='UPDATEOWNER'){var _index=state.collection.findIndex(function(NFT){return NFT.id===parseInt(action.id);});var _collection=_toConsumableArray(state.collection);_collection[_index].owner=action.newOwner;return{contract:state.contract,totalSupply:state.totalSupply,collection:_collection,nftIsLoading:state.nftIsLoading};}if(action.type==='LOADING'){return{contract:state.contract,totalSupply:state.totalSupply,collection:state.collection,nftIsLoading:action.loading};}return defaultCollectionState;};var CollectionProvider=function CollectionProvider(props){var _useReducer=useReducer(collectionReducer,defaultCollectionState),_useReducer2=_slicedToArray(_useReducer,2),CollectionState=_useReducer2[0],dispatchCollectionAction=_useReducer2[1];var loadContractHandler=function loadContractHandler(web3,NFTCollection,deployedNetwork){var contract=deployedNetwork?new web3.eth.Contract(NFTCollection.abi,deployedNetwork.address):'';dispatchCollectionAction({type:'CONTRACT',contract:contract});return contract;};var loadTotalSupplyHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract){var totalSupply;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return contract.methods.totalSupply().call();case 2:totalSupply=_context.sent;dispatchCollectionAction({type:'LOADSUPPLY',totalSupply:totalSupply});return _context.abrupt(\"return\",totalSupply);case 5:case\"end\":return _context.stop();}}},_callee);}));return function loadTotalSupplyHandler(_x){return _ref.apply(this,arguments);};}();var loadCollectionHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contract,totalSupply){var collection,i,hash,response,metadata,owner;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:collection=[];i=0;case 2:if(!(i<totalSupply)){_context2.next=27;break;}_context2.next=5;return contract.methods.tokenURIs(i).call();case 5:hash=_context2.sent;_context2.prev=6;_context2.next=9;return fetch(\"https://ipfs.infura.io/ipfs/\".concat(hash,\"?clear\"));case 9:response=_context2.sent;if(response.ok){_context2.next=12;break;}throw new Error('Something went wrong');case 12:_context2.next=14;return response.json();case 14:metadata=_context2.sent;_context2.next=17;return contract.methods.ownerOf(i+1).call();case 17:owner=_context2.sent;collection=[{id:i+1,title:metadata.properties.name.description,img:metadata.properties.image.description,owner:owner}].concat(_toConsumableArray(collection));_context2.next=24;break;case 21:_context2.prev=21;_context2.t0=_context2[\"catch\"](6);console.error('Something went wrong');case 24:i++;_context2.next=2;break;case 27:dispatchCollectionAction({type:'LOADCOLLECTION',collection:collection});case 28:case\"end\":return _context2.stop();}}},_callee2,null,[[6,21]]);}));return function loadCollectionHandler(_x2,_x3){return _ref2.apply(this,arguments);};}();var updateCollectionHandler=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contract,id,owner){var NFT,hash,response,metadata;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return contract.methods.tokenURI(id).call();case 2:hash=_context3.sent;_context3.prev=3;_context3.next=6;return fetch(\"https://ipfs.infura.io/ipfs/\".concat(hash,\"?clear\"));case 6:response=_context3.sent;if(response.ok){_context3.next=9;break;}throw new Error('Something went wrong');case 9:_context3.next=11;return response.json();case 11:metadata=_context3.sent;NFT={id:parseInt(id),title:metadata.properties.name.description,img:metadata.properties.image.description,owner:owner};_context3.next=18;break;case 15:_context3.prev=15;_context3.t0=_context3[\"catch\"](3);console.error('Something went wrong');case 18:dispatchCollectionAction({type:'UPDATECOLLECTION',NFT:NFT});case 19:case\"end\":return _context3.stop();}}},_callee3,null,[[3,15]]);}));return function updateCollectionHandler(_x4,_x5,_x6){return _ref3.apply(this,arguments);};}();var updateOwnerHandler=function updateOwnerHandler(id,newOwner){dispatchCollectionAction({type:'UPDATEOWNER',id:id,newOwner:newOwner});};var setNftIsLoadingHandler=function setNftIsLoadingHandler(loading){dispatchCollectionAction({type:'LOADING',loading:loading});};var collectionContext={contract:CollectionState.contract,totalSupply:CollectionState.totalSupply,collection:CollectionState.collection,nftIsLoading:CollectionState.nftIsLoading,loadContract:loadContractHandler,loadTotalSupply:loadTotalSupplyHandler,loadCollection:loadCollectionHandler,updateCollection:updateCollectionHandler,updateOwner:updateOwnerHandler,setNftIsLoading:setNftIsLoadingHandler};return/*#__PURE__*/_jsx(CollectionContext.Provider,{value:collectionContext,children:props.children});};export default CollectionProvider;","map":{"version":3,"sources":["C:/Users/pavik/Desktop/nft-marketplace/src/store/CollectionProvider.js"],"names":["useReducer","CollectionContext","defaultCollectionState","contract","totalSupply","collection","nftIsLoading","collectionReducer","state","action","type","index","findIndex","NFT","id","parseInt","owner","newOwner","loading","CollectionProvider","props","CollectionState","dispatchCollectionAction","loadContractHandler","web3","NFTCollection","deployedNetwork","eth","Contract","abi","address","loadTotalSupplyHandler","methods","call","loadCollectionHandler","i","tokenURIs","hash","fetch","response","ok","Error","json","metadata","ownerOf","title","properties","name","description","img","image","console","error","updateCollectionHandler","tokenURI","updateOwnerHandler","setNftIsLoadingHandler","collectionContext","loadContract","loadTotalSupply","loadCollection","updateCollection","updateOwner","setNftIsLoading","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport CollectionContext from './collection-context';\r\n\r\nconst defaultCollectionState = {\r\n  contract: null,\r\n  totalSupply: null,\r\n  collection: [],\r\n  nftIsLoading: true\r\n};\r\n\r\nconst collectionReducer = (state, action) => {\r\n  if(action.type === 'CONTRACT') {    \r\n    return {\r\n      contract: action.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: state.nftIsLoading\r\n    };\r\n  } \r\n  \r\n  if(action.type === 'LOADSUPPLY') {\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: action.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: state.nftIsLoading\r\n    };\r\n  }\r\n\r\n  if(action.type === 'LOADCOLLECTION') {    \r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: action.collection,\r\n      nftIsLoading: state.nftIsLoading\r\n    };\r\n  }\r\n\r\n  if(action.type === 'UPDATECOLLECTION') {    \r\n    const index = state.collection.findIndex(NFT => NFT.id === parseInt(action.NFT.id));\r\n    let collection = [];\r\n\r\n    if(index === -1) {\r\n      collection = [action.NFT, ...state.collection];\r\n    } else {\r\n      collection = [...state.collection];\r\n    }    \r\n\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: collection,\r\n      nftIsLoading: state.nftIsLoading\r\n    };\r\n  }\r\n\r\n  if(action.type === 'UPDATEOWNER') {\r\n    const index = state.collection.findIndex(NFT => NFT.id === parseInt(action.id));\r\n    let collection = [...state.collection];\r\n    collection[index].owner = action.newOwner;\r\n\r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: collection,\r\n      nftIsLoading: state.nftIsLoading\r\n    };\r\n  }\r\n\r\n  if(action.type === 'LOADING') {    \r\n    return {\r\n      contract: state.contract,\r\n      totalSupply: state.totalSupply,\r\n      collection: state.collection,\r\n      nftIsLoading: action.loading\r\n    };\r\n  }\r\n  \r\n  return defaultCollectionState;\r\n};\r\n\r\nconst CollectionProvider = props => {\r\n  const [CollectionState, dispatchCollectionAction] = useReducer(collectionReducer, defaultCollectionState);\r\n  \r\n  const loadContractHandler = (web3, NFTCollection, deployedNetwork) => {\r\n    const contract = deployedNetwork ? new web3.eth.Contract(NFTCollection.abi, deployedNetwork.address): '';\r\n    dispatchCollectionAction({type: 'CONTRACT', contract: contract}); \r\n    return contract;\r\n  };\r\n\r\n  const loadTotalSupplyHandler = async(contract) => {\r\n    const totalSupply = await contract.methods.totalSupply().call();\r\n    dispatchCollectionAction({type: 'LOADSUPPLY', totalSupply: totalSupply});\r\n    return totalSupply;\r\n  };\r\n\r\n  const loadCollectionHandler = async(contract, totalSupply) => {\r\n    let collection = [];\r\n\r\n    for(let i = 0; i < totalSupply; i++) {\r\n      const hash = await contract.methods.tokenURIs(i).call();\r\n      try {\r\n        const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}?clear`);\r\n        if(!response.ok) {\r\n          throw new Error('Something went wrong');\r\n        }\r\n\r\n        const metadata = await response.json();\r\n        const owner = await contract.methods.ownerOf(i + 1).call();\r\n\r\n        collection = [{\r\n          id: i + 1,\r\n          title: metadata.properties.name.description,\r\n          img: metadata.properties.image.description,\r\n          owner: owner\r\n        }, ...collection];\r\n      }catch {\r\n        console.error('Something went wrong');\r\n      }\r\n    }\r\n    dispatchCollectionAction({type: 'LOADCOLLECTION', collection: collection});     \r\n  };\r\n\r\n  const updateCollectionHandler = async(contract, id, owner) => {\r\n    let NFT;\r\n    const hash = await contract.methods.tokenURI(id).call();\r\n    try {\r\n      const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}?clear`);\r\n      if(!response.ok) {\r\n        throw new Error('Something went wrong');      }\r\n\r\n      const metadata = await response.json();      \r\n\r\n      NFT = {\r\n        id: parseInt(id),\r\n        title: metadata.properties.name.description,\r\n        img: metadata.properties.image.description,\r\n        owner: owner\r\n      };\r\n    }catch {\r\n      console.error('Something went wrong');\r\n    }\r\n    dispatchCollectionAction({type: 'UPDATECOLLECTION', NFT: NFT});\r\n  };\r\n\r\n  const updateOwnerHandler = (id, newOwner) => {\r\n    dispatchCollectionAction({type: 'UPDATEOWNER', id: id, newOwner: newOwner});\r\n  };\r\n\r\n  const setNftIsLoadingHandler = (loading) => {\r\n    dispatchCollectionAction({type: 'LOADING', loading: loading});\r\n  };\r\n\r\n  const collectionContext = {\r\n    contract: CollectionState.contract,\r\n    totalSupply: CollectionState.totalSupply,\r\n    collection: CollectionState.collection,\r\n    nftIsLoading:CollectionState.nftIsLoading,\r\n    loadContract: loadContractHandler,\r\n    loadTotalSupply: loadTotalSupplyHandler,\r\n    loadCollection: loadCollectionHandler,\r\n    updateCollection: updateCollectionHandler,\r\n    updateOwner: updateOwnerHandler,\r\n    setNftIsLoading: setNftIsLoadingHandler\r\n  };\r\n  \r\n  return (\r\n    <CollectionContext.Provider value={collectionContext}>\r\n      {props.children}\r\n    </CollectionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CollectionProvider;"]},"metadata":{},"sourceType":"module"}